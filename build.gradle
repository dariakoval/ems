plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.2'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'com.google.cloud.tools.jib' version '3.4.0'
}

ext { 
		springCloudVersion = "2022.0.4"
		mapstructVersion = "1.5.5.Final"
		lombokVersion = "1.18.28"
		jacocoVersion = "0.8.7"
		jUnitVersion='5.10.2'
		profiles = 'dev'
	}

version = '0.0.1'

def springProjects=[project(':student-service'), project(':teacher-service'), project(':user-service'),project(':admin-service')]
def libraryProjects=[project(':common-lib')]

bootJar {
		enabled = false
	}




allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'idea'	
	apply plugin: 'java'
	
	group 'org.aston.ems'
	
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}
	
	java.sourceCompatibility(JavaVersion.VERSION_17)
	java.targetCompatibility(JavaVersion.VERSION_17)
	compileJava.options.encoding = 'UTF-8'
	repositories {
		mavenLocal()
		mavenCentral()
	}
	
	tasks.withType(JavaCompile) {
		options.encoding='UTF-8'
	}
	
}

configure(springProjects){
	
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.google.cloud.tools.jib' 
	
	dependencies {
		  implementation 'org.springframework.boot:spring-boot-configuration-processor'
		  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		  implementation 'org.springframework.boot:spring-boot-starter-web'
		  implementation 'org.liquibase:liquibase-core'
		  compileOnly 'org.projectlombok:lombok'
		  annotationProcessor 'org.projectlombok:lombok'
  		  testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}
	
	bootJar {
		enabled = true
	}
	bootBuildImage{
		imageName=rootProject.name+'-'+project.name
	  }
	
	configurations {
		compileOnly.extendsFrom annotationProcessor
		testCompileOnly.extendsFrom annotationProcessor
		testAnnotationProcessor.extendsFrom annotationProcessor
	}
	
	tasks.named('test', Test) {
		useJUnitPlatform()
		maxHeapSize = '1G'
		testLogging {
			events "passed"
		}
	}

	  sourceSets {
		  intTest {
			  compileClasspath += sourceSets.main.output
			  runtimeClasspath += sourceSets.main.output
		  }
	  }
	  configurations {
		  intTestImplementation.extendsFrom testImplementation
		  intTestRuntimeOnly.extendsFrom runtimeOnly
	  }
	  tasks.register('integrationTest', Test) {
		  description = 'Runs integration tests.'
		  group = 'verification'
		  testClassesDirs = sourceSets.intTest.output.classesDirs
		  classpath = sourceSets.intTest.runtimeClasspath
		  shouldRunAfter test
		  useJUnitPlatform()
		  testLogging {
			  events "passed"
		  }
	  }
	
	check.dependsOn integrationTest
	
	jib {
		var tag = "latest"
		from {
		  image = "eclipse-temurin:17.0.10_7-jre-jammy"	  
		  platforms{
			  platform {
				  architecture = 'amd64' // 'arm64'
						  os = 'linux'
			  }
		  }
		}
		
		to {
		  image = "aston/${rootProject.name}.${project.name}:${rootProject.version}"
		 tags = ["$tag"]
		}
		
		container {
			jvmFlags = [
					  	"-server",
						"-Duser.timezone=UTC",
						"-Xms256m",
						"-Xmx512m"
						]
			creationTime = Instant.now().toString()
			format = com.google.cloud.tools.jib.api.buildplan.ImageFormat.OCI
		}
	  }
	  
	  build.dependsOn jibDockerBuild
}

configure(libraryProjects){
	apply plugin: 'java-library'
	dependencies {
		testImplementation "org.junit.jupiter:junit-jupiter:${jUnitVersion}"
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}
}







